{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["App","id","placeholder","type","ref","textInput","onClick","onOnclickHandler","React","createRef","e","country","current","value","fetch","then","response","statusText","json","PromiseResult","main","document","getElementById","Object","keys","data","length","innerHTML","i","covid19Stats","province","keyId","confirmed","deaths","catch","err","console","error","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode"],"mappings":"mLAqBeA,MAjBf,WACE,OACE,gCAEE,sBAAKC,GAAK,YAAV,UACE,uBAAOC,YAAY,qBAAsBC,KAAO,OAAOC,IAAKC,IAC5D,wBAAQJ,GAAG,aAAaK,QAASC,EAAjC,mBAIF,oBAAIN,GAAK,aAiDf,IAAII,EAAYG,IAAMC,YAElBF,EAAmB,SAACG,GAzCxB,IAAoBC,EA0CW,OAA1BN,EAAUO,QAAQC,QA1CHF,EA2CLN,EAAUO,QAAQC,MAzCxBC,MAAM,6DAAD,OAyCyB,QAzCzB,oBAAsFH,GAAW,CAC3G,OAAU,MACV,QAAW,CACT,kBAAmB,iDACnB,iBAAkB,wDAGrBI,MAAK,SAAAC,GACuB,OAAtBA,EAASC,WACED,EAASE,OACjBH,MAAK,SAAAI,GACP,IAAMC,EAAOC,SAASC,eAAe,QAErC,GAA4C,IAAzCC,OAAOC,KAAKL,EAAcM,MAAMC,OAAW,CAC5CN,EAAKO,UAAU,GACf,IAAI,IAAIC,EAAE,EAAEA,EAAET,EAAcM,KAAKI,aAAaH,OAAOE,IAAI,CACvD,IAAIE,EAAWX,EAAcM,KAAKI,aAAaD,GAAGE,SACnC,OAAXA,IACFA,EAASX,EAAcM,KAAKI,aAAaD,GAAGG,OAE9C,IAAIC,EAAYb,EAAcM,KAAKI,aAAaD,GAAGI,UAC/CC,EAASd,EAAcM,KAAKI,aAAaD,GAAGK,OAChDb,EAAKO,WAAL,cAAuBG,EAAvB,yBAAgDE,EAAhD,oBAAqEC,EAArE,cAONZ,SAASC,eAAe,QAAQK,UAAU,qBAG/CO,OAAM,SAAAC,GACHC,QAAQC,MAAOF,QC/CNG,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBzB,MAAK,YAAkD,IAA/C0B,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCDdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEF3B,SAASC,eAAe,SAM1BgB,K","file":"static/js/main.ccff55c9.chunk.js","sourcesContent":["import './App.css';\r\nimport React from \"react\";\r\n\r\n\r\nfunction App() {\r\n  return (\r\n    <div>\r\n    \r\n      <div id = 'container'>\r\n        <input placeholder='enter country name'  type = 'text' ref={textInput}></input>\r\n        <button id='activation' onClick={onOnclickHandler}>ok</button>\r\n      </div>\r\n\r\n\r\n      <ul id = 'main'>\r\n        \r\n      </ul>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n\r\n\r\nfunction RequestURL(country,totalOrStats){\r\n\r\n  return fetch(`https://covid-19-coronavirus-statistics.p.rapidapi.com/v1/${totalOrStats}?country=${country}`, {\r\n    \"method\": \"GET\",\r\n    \"headers\": {\r\n      \"x-rapidapi-host\": \"covid-19-coronavirus-statistics.p.rapidapi.com\",\r\n      \"x-rapidapi-key\": \"933c98fa7amshe2840a4a213dfadp15a53ajsn8629f35eaef5\"\r\n    }\r\n  })\r\n  .then(response => {\r\n      if(response.statusText==='OK'){\r\n        const res = response.json()\r\n        res.then(PromiseResult=>{\r\n          const main = document.getElementById('main')\r\n          \r\n          if(Object.keys(PromiseResult.data).length===2){\r\n            main.innerHTML=''\r\n            for(let i=0;i<PromiseResult.data.covid19Stats.length;i++){\r\n              let province = PromiseResult.data.covid19Stats[i].province\r\n              if (province===null){\r\n                province=PromiseResult.data.covid19Stats[i].keyId\r\n              }\r\n              let confirmed = PromiseResult.data.covid19Stats[i].confirmed\r\n              let deaths = PromiseResult.data.covid19Stats[i].deaths\r\n              main.innerHTML+=`<li>${province}  | confirmed:${confirmed} | death:${deaths}</li>`\r\n            }\r\n            \r\n          }\r\n        \r\n        })  \r\n      }else{\r\n        document.getElementById('main').innerHTML='no such country'\r\n      }\r\n  })\r\n  .catch(err => {\r\n      console.error( err )\r\n  })\r\n}\r\n\r\nlet textInput = React.createRef();  // React use ref to get input value\r\n\r\nlet onOnclickHandler = (e) => {\r\n  if(textInput.current.value!==null){\r\n    RequestURL(textInput.current.value,'stats')\r\n  } \r\n};\r\n\r\n\r\n\r\n","const reportWebVitals = onPerfEntry => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}